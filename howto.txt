https://github.com/TomasHubelbauer/raspi-mouse-jiggler





















































import time
import usb_hid
from adafruit_hid.mouse import Mouse

mouse = Mouse(usb_hid.devices)

shift = 2
wait = 0.25

while True:
  mouse.move(x=shift, y=shift)
  time.sleep(wait)
  mouse.move(x=shift, y=-shift)
  time.sleep(wait)
  mouse.move(x=-shift, y=-shift)
  time.sleep(wait)
  mouse.move(x=-shift, y=shift)
  time.sleep(wait)


I'm using a Raspberry Pi Pico:

  1.  Press and hold the BOOTSEL button on the Pi Pico
  2.  Connect the Pico to the computer using a data+power USB cable
  3.  Find the RPI-RP2 mass storage device that should mount and release the button
  4.  Download CircuitPython UF2 https://circuitpython.org/board/raspberry_pi_pico
  5.  Wait for the RPI-RP2 drive to unmount itself and reconnect it to the computer
  6.  Wait for a new device to mount called CIRCUITPY
  7.  Go to https://github.com/adafruit/Adafruit_CircuitPython_HID and download it
  8.  Move adafruit_hid from the downloaded repository over to CIRCUITPY/lib
  9.  Open CIRCUITPY/code.py and edit it to have the above content





code from ai to use the bootsel button

Yes, it is possible to use the bootsel button on a Raspberry Pi Pico as an input in CircuitPython. The bootsel button is a general-purpose input/output (GPIO) pin that can be used to trigger a variety of actions in CircuitPython, including reading its current state.

To use the bootsel button as an input in CircuitPython, you will first need to import the necessary libraries and initialize the button as an input. You can do this using the following code:

import board
import digitalio

button = digitalio.DigitalInOut(board.BOOT_BUTTON)
button.direction = digitalio.Direction.INPUT
button.pull = digitalio.Pull.UP

Once the button is initialized, you can read its current state by accessing the .value attribute. For example, to check if the button is pressed, you can use the following code:

if button.value:
    print("Button is not pressed")
else:
    print("Button is pressed")

You can also use the bootsel button to trigger actions in your CircuitPython code by setting up a loop to continuously check the button's state and perform an action when it changes. For example:

while True:
    if button.value:
        print("Button is not pressed")
    else:
        print("Button is pressed")

I hope this helps! Let me know if you have any other questions.